//Vars
$tooltip-zindex: 999;
$tooltip-max-width: 200px;
$tooltip-font-size: 10px;
$tooltip-text-color: #fff;
$tooltip-background-color: rgba(0,0,0,0.54);
$tooltip-opacity: 1;
$animation-curve-linear-out-slow-in: linear;
$property: 1;

[data-tooltip] { //.tooltip, [data-tooltip]
    position: relative;
    display: inline-block;
    /*&:before, &:after {*/
    /*position: absolute;*/
    /*visibility: hidden;
        opacity: 0;
        z-index: $zindex-tooltip;
        pointer-events: none;*/
    /*@include vendor('transition', 0.3s ease);
        @include vendor('transition-delay', $hideDelay);*/
    /*}*/
    /**
	 * tooltip arrow
	 */
    /*&:before {*/
    /*position: absolute;
        width: 0;
        height: 0;
        border-color: transparent;
        border-style: solid;*/
    /*content: '';
        position: absolute;
        background: transparent;
        border: $arrowBorderWidth solid transparent;
*/
    /*}*/
    /**
	 * tooltip body
	 */
    &:after {
        position: absolute;
        /*top: -500px;
        left: -500px;*/
        z-index: $tooltip-zindex;
        /*display: inline-block;*/
        max-width: $tooltip-max-width;
        padding: 4px 8px;
        margin-top: 8px;
        font-size: $tooltip-font-size;
        font-weight: 500;
        line-height: 14px;
        color: $tooltip-text-color;
        text-align: center;
        pointer-events: none;
        visibility: hidden;
        content: attr(data-tooltip);
        background: $tooltip-background-color;
        border-radius: 2px;
        opacity: 0;
        transform: scale(0);
        transform: translateX(-50%);
        transform-origin: top center;
        will-change: transform;
        //"font", "font-family", "font-size", "font-style", "font-weight", "font-variant", "font-size-adjust", "font-stretch", "font-effect", "font-emphasize", "font-emphasize-position", "font-emphasize-style", "font-smooth",
        //"line-height", "color", "text-align","text-decoration", "text-transform",  "word-break", "word-wrap", "white-space", "vertical-align", "list-style",
        // "pointer-events", "cursor", "visibility", "content",
        //"background", "background-color", "background-image", "background-repeat", "background-attachment", "background-position", "background-position-x", "background-position-y","background-origin", "-webkit-background-size",
        // "border", "border-color", "border-style", "border-width",  "border-radius" outline, opacity,
        // "box-shadow",
        // "transition", "transition-delay",  "transition-timing-function", "transition-duration", "transition-property",  "transform",  "transform-origin", "animation","animation-name",  "animation-duration","animation-play-state", "animation-timing-function", "animation-delay","animation-iteration-count", "animation-direction";
    }

    &:hover /*, &:focus*/ {
        /*&:before,*/
        &:after {
            visibility: visible;
            opacity: $tooltip-opacity;
            animation: pulse 200ms $animation-curve-linear-out-slow-in forwards;
        }
        /*&:after {
            background: lighten($grey, 10%);
            border-radius: $border-radius-small;
            padding: $space-small*0.8;
        }*/
    }
    /*&:hover {
        &:before, &:after {
            // $showDelay will apply as soon as element is hovered.
            @include vendor('transition-delay', $showDelay);
        }
    }*/
    /*Position*/
    /*Right*/
    /*&.right {
        @include horizontal-positioned-tooltip('left', 1);
    }*/
    /*Left*/
    /*&.left {
        @include horizontal-positioned-tooltip('right', -1);
    }*/
    /*Top*/
    /*&.top {
        @include vertical-positioned-tooltip('bottom', -1);

        &.left {
            @include vertical-positioned-tooltip('bottom', -1, -1);
        }

        &.right {
            @include vertical-positioned-tooltip('bottom', -1, 1);
        }
    }*/
    /*Bottom*/
    /*&.bottom {
        @include vertical-positioned-tooltip('top', 1);

        &.left {
            @include vertical-positioned-tooltip('top', 1, -1);
        }

        &.right {
            @include vertical-positioned-tooltip('top', 1, 1);
        }
    }*/
}

/*.mdl-tooltip--large {
  line-height: 14px;
  font-size: $tooltip-font-size-large;
  padding: 16px;
}*/

@keyframes pulse {
    0% {
        transform: scale(0);
        opacity: 0;
    }

    50% {
        // Fixes a weird bug with the interaction between Safari and the result of
        // the SASS compilation for the animation.
        // Essentially, we need to make sure that "50%" and "100%" don't get merged
        // into a single "50%, 100%" entry, so we need to avoid them having any
        // matching properties.
        transform: scale(0.99);
    }

    100% {
        transform: scale(1);
        opacity: 1;
        visibility: visible;
    }
}




[data-tooltip=''] {
    &:before, &:after {
        display: none !important;
    }
}




// Base class
/*.tooltip {

    &.top {
        padding: $tooltip-arrow-width 0;
        margin-top: -$tooltip-margin;

        .tooltip-arrow {
            bottom: 0;
            left: 50%;
            margin-left: -$tooltip-arrow-width;
            border-width: $tooltip-arrow-width $tooltip-arrow-width 0;
            border-top-color: $tooltip-arrow-color;
        }
    }

    &.right {
        padding: 0 $tooltip-arrow-width;
        margin-left: $tooltip-margin;

        .tooltip-arrow {
            top: 50%;
            left: 0;
            margin-top: -$tooltip-arrow-width;
            border-width: $tooltip-arrow-width $tooltip-arrow-width $tooltip-arrow-width 0;
            border-right-color: $tooltip-arrow-color;
        }
    }

    &.bottom {
        padding: $tooltip-arrow-width 0;
        margin-top: $tooltip-margin;

        .tooltip-arrow {
            top: 0;
            left: 50%;
            margin-left: -$tooltip-arrow-width;
            border-width: 0 $tooltip-arrow-width $tooltip-arrow-width;
            border-bottom-color: $tooltip-arrow-color;
        }
    }

    &.left {
        padding: 0 $tooltip-arrow-width;
        margin-left: -$tooltip-margin;

        .tooltip-arrow {
            top: 50%;
            right: 0;
            margin-top: -$tooltip-arrow-width;
            border-width: $tooltip-arrow-width 0 $tooltip-arrow-width $tooltip-arrow-width;
            border-left-color: $tooltip-arrow-color;
        }
    }
}*/



/*Variables*/
// hint-variables.scss
//
// Declares some variables used within the library.

// Prefix for all classes. By default, BEM naming convention is used
/*$prefix: 'hint--' !default;

// font size
$fontSize: 12px;

// paddings
$verticalPadding: 8px;
$horizontalPadding: 10px;

// default tooltip height
$tooltipHeight: $fontSize + 2 * $verticalPadding !default;

// border-width for tooltip arrow
$arrowBorderWidth: 6px !default;

// horizontal arrow offset
$arrowOffsetX: 1 * $arrowBorderWidth !default;

// text-shadow darken percentage
$textShadowDarkenAmount: 25% !default;

// transition distance
$transitionDistance: 8px !default;

// Delay in showing the tooltips.
$showDelay: 100ms !default;

// Delay in hiding the tooltips.
$hideDelay: 0ms !default;

// z-index for tooltips
$zIndex: 1000000 !default;


// Various colors
// Default color is blackish
$defaultColor: hsl(0, 0%, 22%) !default;

// Error color
$errorColor: hsl(1, 40%, 50%) !default;

// Warning color
$warningColor: hsl(38, 46%, 54%) !default;

// Info Color
$infoColor: hsl(200, 50%, 45%) !default;

// Success Color
$successColor: hsl(121, 32%, 40%) !default;*/



/*Mixin*/
// hint-mixins.scss
//
// Place to store common mixins.

// Vendor prefixer mixin.
/*@mixin vendor($property, $value) {
    -webkit-#{$property}: $value;
    -moz-#{$property}: $value;
    #{$property}: $value;
}

// Generates border-color rules for all possible positions
@mixin arrow-border-color($color) {
    @each $position in top, bottom, left, right {
        @if $position == top or $position == bottom {
            // Loop further for classes like .top-left, bottom-right etc
            @each $xDir in left, right {
                &.#{$prefix}#{$position}-#{$xDir}:before {
                    border-#{$position}-color: $color;
                }
            }
        }

        &.#{$prefix}#{$position}:before {
            border-#{$position}-color: $color;
        }
    }
}

// mixin to set margin on tooltip using translate transform
// $property
@mixin set-margin($property, $transitionDirection, $translateX: 0) {
    $value: unquote("#{$property}(#{$transitionDistance * $transitionDirection})");

    &:after, &:before {
        @if $translateX != 0 {
            @include vendor('transform', translateX($translateX) $value);
        }
        @else {
            @include vendor('transform', $value);
        }
    }
}*/



/*Core*/


/**
 * source: hint-position.scss
 *
 * Defines the positoning logic for the tooltips.
 *
 * Classes added:
 * 	1) hint--top
 * 	2) hint--bottom
 * 	3) hint--left
 * 	4) hint--right
 */

/*@mixin vertical-positioned-tooltip($propertyY, $transitionDirection, $xDirection: 0) {
    &:before {
        // get the arrow out
        margin-#{$propertyY}: -2 * $arrowBorderWidth;
    }

    &:before, &:after {
        #{$propertyY}: 100%;
        left: 50%;
    }

    $translateX: -50%;

    @if $xDirection == -1 {
        $translateX: -100%;
    }
    @elseif $xDirection == 1 {
        $translateX: 0;
    }

    &:after, &:before {
        @include vendor('transform', translateX($translateX));
    }

    &:after {
        @if $xDirection != 0 {
            // bring back the tooltip by some offset so that arrow doesn't stick at end
            margin-left: -$xDirection * $arrowOffsetX;
        }
    }

    &:hover, &:focus {
        @include set-margin('translateY', $transitionDirection, $translateX);
    }
}

@mixin horizontal-positioned-tooltip($propertyX, $transitionDirection) {
    &:before {
        // get the arrow out
        margin-#{$propertyX}: -2 * $arrowBorderWidth;
        // bring back to center
        margin-bottom: -1 * $arrowBorderWidth;
    }

    &:after {
        // bring back to center
        margin-bottom: -1 * floor($tooltipHeight / 2);
    }

    &:before, &:after {
        #{$propertyX}: 100%;
        bottom: 50%;
    }

    &:hover, &:focus {
        @include set-margin('translateX', $transitionDirection);
    }
}*/


/**
 * set default color for tooltip arrows
 */
/*@include arrow-border-color($defaultColor);*/




/**
 * source: hint-theme.scss
 *
 * Defines basic theme for tooltips.
 *
 */

/*.tooltip, [data-tooltip] {*/
/**
	 * tooltip body
	 */
/*&:after {
        text-shadow: 0 -1px 0px darken($defaultColor, $textShadowDarkenAmount);
        box-shadow: 4px 4px 8px rgba(0, 0, 0, 0.3);
    }
}*/




/**
 * source: hint-color-types.scss
 *
 * Contains tooltips of various types based on color differences.
 *
 * Classes added:
 * 	1) hint--error
 * 	2) hint--warning
 * 	3) hint--info
 * 	4) hint--success
 *
 */


// mixin to generate different color style tooltips
/*@mixin hint-type($color) {
    &:after {
        background-color: $color;
        text-shadow: 0 -1px 0px darken($color, $textShadowDarkenAmount);
    }
    // generate arrow color style
    @include arrow-border-color($color);
}*/

/**
 * Error
 */
/*.#{$prefix}error {
    @include hint-type($errorColor);
}*/

/**
 * Warning
 */
/*.#{$prefix}warning {
    @include hint-type($warningColor)
}*/

/**
 * Info
 */
/*.#{$prefix}info {
    @include hint-type($infoColor)
}*/

/**
 * Success
 */
/*.#{$prefix}success {
    @include hint-type($successColor)
}*/




/**
 * source: hint-always.scss
 *
 * Defines a persisted tooltip which shows always.
 *
 * Classes added:
 * 	1) hint--always
 *
 */

/*.#{$prefix}always {
    &:after, &:before {
        opacity: 1;
        visibility: visible;
    }

    &.#{$prefix}top {
        @include set-margin('translateY', -1, -50%);

        &-left {
            @include set-margin('translateY', -1, -100%);
        }

        &-right {
            @include set-margin('translateY', -1, 0);
        }
    }

    &.#{$prefix}bottom {
        @include set-margin('translateY', 1, -50%);

        &-left {
            @include set-margin('translateY', 1, -100%);
        }

        &-right {
            @include set-margin('translateY', 1, 0);
        }
    }

    &.#{$prefix}left {
        @include set-margin('translateX', -1);
    }

    &.#{$prefix}right {
        @include set-margin('translateX', 1);
    }
}*/




/**
 * source: hint-effects.scss
 *
 * Defines various transition effects for the tooltips.
 *
 * Classes added:
 * 	1) hint--no-animate
 * 	2) hint--bounce
 *
 */

// Remove animation from tooltips.
/*.#{$prefix}no-animate {
    &:before, &:after {
        @include vendor('transition-duration', 0ms);
    }
}

// Bounce effect in tooltips.
.#{$prefix}bounce {
    &:before, &:after {
        -webkit-transition: opacity 0.3s ease, visibility 0.3s ease, -webkit-transform 0.3s cubic-bezier(.71,1.7,.77,1.24);
        -moz-transition: opacity 0.3s ease, visibility 0.3s ease, -moz-transform 0.3s cubic-bezier(.71,1.7,.77,1.24);
        transition: opacity 0.3s ease, visibility 0.3s ease, transform 0.3s cubic-bezier(.71,1.7,.77,1.24);
    }
}*/
